#!/usr/bin/env python
# coding=UTF-8
# Chen Wen <chenpc@cs.nctu.edu.tw>
# Web Site http://code.google.com/p/ydict/
# Blog : http://chenpc.csie.in
import httplib, urllib,string,sys
from HTMLParser import HTMLParser
from optparse import OptionParser
import locale
from codecs import EncodedFile

version="ydict 1.0.1"
red="\33[31;1m"
lindigo="\33[36;1m"
indigo="\33[36m"
green="\33[32m"
yellow="\33[33;1m"
blue="\33[34;1m"
org="\33[0m"
light="\33[0;1m"

class MyHTMLParser(HTMLParser):
    redirect=0
    pron=True
    def __init__(self):
        self.show=0
        self.prefix=""
        self.postfix=org
        self.entry=1
        self.kkmode=0
        self.result=[]

    def handle_starttag(self, tag, attrs):
	if self.redirect == 1 and tag == "strong":
		self.show=1
		self.prefix="Spell Check: ["+yellow
		self.postfix=org+"]"
	
        elif tag == "span" and len(attrs)==0:
                if self.kkmode==1:
                        self.show=1
                        self.prefix=""
        elif tag == "div" and len(attrs)==0:
                if self.kkmode==1:
                        self.show=1
                        self.prefix=""
        elif tag == "div" and len(attrs)!=0:
                if attrs[0][1]=="pronunciation" and self.pron==True:
                        self.kkmode=1
                        self.result.append(blue)
                elif attrs[0][1]=="caption":
			self.show=1
			self.prefix=red
	elif tag == "p" and len(attrs)!=0:
		if attrs[0][1] == "example":
			self.show=1
			self.prefix="    "+indigo
		elif attrs[0][1] == "interpret":
			self.show=1
			self.prefix="  "+str(self.entry)+"."
			self.entry+=1

    def handle_data(self,data):
        if self.show == 1:
                self.result.append(self.prefix+data+self.postfix+"\n")
                self.show=0

    def handle_endtag(self, tag):
        if tag == "div":
                if self.kkmode ==1:
                        self.kkmode=0
                        self.result.append(org)
def htmlspcahrs(content):
    content=content.replace("&amp;","&")
    content=content.replace("&#39;","\'")
    content=content.replace("&quot;","\"")
    content=content.replace("&gt",">")
    content=content.replace("&lt","<")
    content=content.replace("<span>","")
    content=content.replace("</span>","")
    content=content.replace("<b>",lindigo)
    content=content.replace("</b>",org+indigo)
    content=content.replace("\n","\n    "+green)
    return content
def dict(word,pron):
        output=""
        print ">"+light+word+org
        h1=httplib.HTTPConnection("tw.dictionary.yahoo.com")
        headers = {"Content-type": "application/x-www-form-urlencoded","Accept": "text/plain"}
        params = urllib.urlencode({'p': word ,'ei' : 'UTF-8'})
        h1.request("POST", "/search",params, headers)
        r1=h1.getresponse()
        data1 = r1.read()

        p=MyHTMLParser()
	p.redirect=0
	p.pron=pron
	try:
        	index1=string.index(data1,"查看全部")
		index2=string.index(data1,"知識+")
	except ValueError:
		try:
			index1=string.index(data1,"您是不是要查")+len("您是不是要查")
			index2=string.index(data1,"adbn_BE")
			p.redirect=1
		except ValueError:
			return yellow+"Not Found!"+org+"\n"
		
        data=data1[index1:index2]
        p.reset()
        data=htmlspcahrs(data)
        p.feed(data)
        for s in p.result:
                output+=s
        return output
            
if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-s", "--step", dest="step", help="one step mode.",default=False,action="store_true")
    parser.add_option("-p", "--pron", dest="pron", help="disable pronounce.",default=True,action="store_false")
    parser.add_option("-u", "--utf8", dest="utf8", help="force utf-8 encoding.",default=False,action="store_true")
    parser.add_option("-b", "--big5", dest="big5", help="force big5 encoding.",default=False,action="store_true")
    parser.add_option("-w", "--word", dest="oneword", type="string" , help="only one word.",action="store")
    parser.add_option("-v", "--version", dest="version", help="show version.",default=False,action="store_true")

    (options, args) = parser.parse_args()
    m_pron=options.pron
    (lang , enc)=locale.getdefaultlocale()
    if options.version == True:
        print version
        exit()
    if options.utf8 == True:
        enc="utf8"
    elif options.big5 == True:
        enc="big5"

    if options.utf8 == options.big5 ==True:
        print "Can not select utf-8 and big5 at the same time"
        exit()
    if enc == 'big5':
        m_pron=False
    
    if True :
        result=dict(sys.argv[1],m_pron)
        result=unicode(result,'utf8')
        result=result.encode(enc)
        print result
        exit()

    while(1):
            try:
                    word=raw_input("<PyDict> ")
            except KeyboardInterrupt:
                    print ""
                    exit()
            except EOFError:
                    print ""
                    exit()
            result=dict(word,m_pron)
            result=unicode(result,'utf8')
            result=result.encode(enc)
            print result

            if options.step == True:
                exit()

